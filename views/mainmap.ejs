<!DOCTYPE html>
<html>
<head>
  <meta charset='utf-8' />
  <title>Main Map</title>
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />

  <!-- jquery -->
  <script src="/javascripts/jquery-3.1.1.min.js"></script>

  <!-- mapbox gl -->
  <script src='/javascripts/mapbox-gl.js'></script>
  <link  rel='stylesheet' href='/stylesheets/mapbox-gl.css'/>

  <!-- leaflet -->
  <link rel="stylesheet" href="/stylesheets/leaflet.css"/>
  <script src="/javascripts/leaflet.js"></script>

  <!-- leaflet draw -->
  <link rel="stylesheet" href="/stylesheets/leaflet.draw.css" />
	<script src="/javascripts/leaflet.draw.js"></script>

  <!-- json2 for stringify function -->
  <script src="javascripts/json2.js"></script>

  <!-- html style -->
  <link rel="stylesheet" href="/stylesheets/mainmap.css"/>

  <!-- bootstrap -->
  <link rel="stylesheet" href="/stylesheets/bootstrap.min.css"/>
	<link rel="stylesheet" href="/stylesheets/superhero-bootstrap.min.css"/>
	<script src="/javascripts/bootstrap.min.js"></script>

  <!-- Material Icon -->
  <link rel="stylesheet" href="/stylesheets/icon.css"/>

  <!-- Toastr -->
  <link rel="stylesheet" href="/stylesheets/toastr.min.css"/>
  <script src="/javascripts/toastr.min.js"></script>

  <!-- Firebase database stuff -->
  <script src="/javascripts/firebase.js"></script>
  <script src="/javascripts/firebase-app.js"></script>
  <script src="/javascripts/firebase-database.js"></script>

  <!-- SHP to GeoJSON -->
  <script src="/javascripts/proj4.js"></script>
  <script src="/javascripts/jszip.js"></script>
  <script src="/javascripts/jszip-utils.js"></script>
  <!--[if IE]>
  <script type="text/javascript" src="/javascripts/jszip-utils-ie.js"></script>
  <![endif]-->
  <script src="/javascripts/preprocess.js"></script>
  <script src="/javascripts/preview.js"></script>

</head>
<body>
  <!-- NavBar Start -->
  <nav class="navbar navbar-default" id="navbar">
    <div class="container-fluid" style="padding-right: 0;">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand center" id="title"><b>Leaflet Map</b></a>
      </div>
      <div class="navbar-collapse collapse" id="bs-example-navbar-collapse-1" aria-expanded="false" style="height: 1px;">
      <!-- align left buttons -->
        <ul class="nav navbar-nav" id="navbarItemGap">
          <!-- Upload button, modal trigger -->
          <li class="dropdown navbarStyle">
          <a class="dropdown-toggle navbarStyle" data-toggle="dropdown" role="button" aria-expanded="false" style="background-color: #5cb85c">Upload Layer <span class="caret"></span></a>
            <ul class="dropdown-menu" role="menu">
              <li><label class="btn dropdownStyle"><input id="uploadJSON" style="position: absolute; display: none;" type='file' accept='Json' onchange="loadFile(event)">Upload <b>JSON/GeoJSON</b></label></li>
              <li class="divider"></li>
              <li><label class="btn dropdownStyle"><input id="uploadSHP" style="position: absolute; display: none;" type='file' accept='application/zip' onchange="uploadSHP()">Upload <b>SHP</b></label></li>
            </ul>
          </li>
          <!-- Download dropdown -->
          <li class="dropdown navbarStyle">
          <a class="dropdown-toggle navbarStyle" data-toggle="dropdown" role="button" aria-expanded="false" style="background-color: #df691a">Download Layer <span class="caret"></span></a>
            <ul class="dropdown-menu" role="menu">
              <li><a id="downloadPoints" class="dropdownStyle" onclick="downloadPointsJSON()">Download <b>points</b> layer</a></li>
              <li class="divider"></li>
              <li><a id="downloadLines" class="dropdownStyle" onclick="downloadLinesJSON()">Download <b>lines</b> layer</a></li>
            </ul>
          </li>
          <!-- Save online -->
          <li class="dropdown navbarStyle">
          <a class="dropdown-toggle navbarStyle" data-toggle="dropdown" role="button" aria-expanded="false" style="background-color: #f0ad4e">Save Online  <span class="caret"></span></a>
            <ul class="dropdown-menu" role="menu">
              <li><a class="dropdownStyle" onclick="writeMarkerData()">Save <b>points</b></a></li>
              <li class="divider"></li>
              <li><a class="dropdownStyle" onclick="writeLineData()">Save <b>lines</b></a></li>
            </ul>
          </li>
        </ul>
      <!-- align right buttons -->
        <ul class="nav navbar-nav navbar-right" id="logout">
          <li><a class="btn btn-default" id="navbarStyle">Welcome back, <b><%= user.username %></b></a></li>
          <!-- Logout button, modal trigger -->
          <li><a class="btn btn-danger" data-target="#logoutModal"  data-toggle="modal" id="navbarStyle"><i class="material-icons">power_settings_new</i></a></li>
          <!-- Hidden modal -->
          <div class="modal fade" id="logoutModal">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                  <h4 class="modal-title">Logout?</h4>
                </div>
                <div class="modal-body" id="modalbody">
                  <h5>You are about to <b>logout</b>, are you sure?</h5>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                  <a type="button" class="btn btn-danger" href="/logout">Logout</a>
                </div>
              </div>
            </div>
          </div>
        </ul>
      </div>
    </div>
  </nav>

  <!-- map div -->
  <div id='map'></div>

   <button onclick="retrieveUserData()">test</button>
  <!-- <button> <input id="shapeFileUpload" type='file' accept='application/zip' onchange="load()"> </button> -->

  <!-- Init map JS last after "map" div -->
  <script src="/javascripts/mainmap.js"></script>
</body>
<script>

  /////////////////////////////////////////////////////////////
  // INIT FIREBASE
  /////////////////////////////////////////////////////////////
  var config = {
    apiKey: "AIzaSyBidD56QDaYhdtyNGS-rWhSzSfmzIWSmNk",
    authDomain: "awesome-93639.firebaseapp.com",
    databaseURL: "https://awesome-93639.firebaseio.com",
    storageBucket: "awesome-93639.appspot.com",
    messagingSenderId: "900291118172"
  };
  firebase.initializeApp(config);
  var database = firebase.database();

  /////////////////////////////////////////////////////////////
  // INIT BASE MAP
  /////////////////////////////////////////////////////////////
  var current = L.tileLayer('https://maps-{s}.onemap.sg/v3/Default/{z}/{x}/{y}.png', {
            detectRetina: true,
						attribution: 'Map data © contributors, <a href="http://SLA.gov.sg">Singapore Land Authority</a>',
						maxZoom: 18,
            minZoom: 11
					});
  var night = L.tileLayer('http://maps-{s}.onemap.sg/v2/Night/{z}/{x}/{y}.png', {
            detectRetina: true,
						attribution: 'Map data © contributors, <a href="http://SLA.gov.sg">Singapore Land Authority</a>',
						maxZoom: 18,
            minZoom: 11
					});
  var grey = L.tileLayer('http://maps-{s}.onemap.sg/v2/Grey/{z}/{x}/{y}.png', {
            detectRetina: true,
						attribution: 'Map data © contributors, <a href="http://SLA.gov.sg">Singapore Land Authority</a>',
						maxZoom: 18,
            minZoom: 11
					});
  var original = L.tileLayer('http://maps-{s}.onemap.sg/v2/Original/{z}/{x}/{y}.png', {
            detectRetina: true,
						attribution: 'Map data © contributors, <a href="http://SLA.gov.sg">Singapore Land Authority</a>',
						maxZoom: 18,
            minZoom: 11
					});
    map.remove();
  	var map = L.map('map', {
      center: [1.32073, 103.910827],
      zoom: 12,
      layers: [current]
  });

  // SHP to GeoJSON
  vector = L.geoJson().addTo(map);

  //Drawn items layer init
  var drawnItems = new L.FeatureGroup();
  map.addLayer(drawnItems);

  var drawnLines = new L.FeatureGroup();
  map.addLayer(drawnLines);

  var drawControl = new L.Control.Draw({
    position: 'topright',
    draw: {
        polyline: false,
        polygon: false,
        rectangle: false,
        circle: false,
        marker: {
            color: 'green'
        }
    },
    edit: {
        featureGroup: drawnItems,
        remove: false
    }
  });
  map.addControl(drawControl);

  var drawControl2 = new L.Control.Draw({
      position: 'topright',
      draw: {
          polyline: {
              metric: true,
          },
          polygon: false,
          rectangle: false,
          circle: false,
          marker: false
      },
      edit: {
          featureGroup: drawnLines,
          remove: false
      }
  });
  map.addControl(drawControl2);

  //What happens when custom point created
  map.on('draw:created', function (e) {
      var type = e.layerType,
      layer = e.layer;

      if (type === 'marker') {
  	    layer.addTo(drawnItems)
          // Do marker specific actions
      }
      if (type === 'polyline'){
        layer.addTo(drawnLines)
      }

      // Do whatever else you need to. (save to db, add to map etc)
      map.addLayer(layer);
  });

  //What happens when custom point edited
  map.on('draw:edited', function (e) {
      var layers = e.layers;
      layers.eachLayer(function (layer) {
          //do whatever you want, most likely save back to db
      });
  });

  //Basemap configs
  var baseMaps = {
    "Default": current,
    "Night": night,
    "Grey": grey,
    "Original": original
  };

  //Overlay map configs
  var overlayMaps = {
  	"Drawn Markers": drawnItems,
    "Drawn Lines": drawnLines
  };

  //First load of layer control
  lcontrol = L.control.layers(baseMaps, overlayMaps).addTo(map);

  /////////////////////////////////////////////////////////////
  //FUNCTIONS BELOW ONLY
  /////////////////////////////////////////////////////////////

  //Toastr Config
  //
  toastr.options = {
    "closeButton": true,
    "debug": false,
    "newestOnTop": true,
    "progressBar": true,
    "positionClass": "toast-top-right",
    "preventDuplicates": false,
    "onclick": null,
    "showDuration": "300",
    "hideDuration": "1000",
    "showEasing": "swing",
    "hideEasing": "linear",
    "showMethod": "fadeIn",
    "hideMethod": "fadeOut"
  }

  //Upload JSON
  //
  var i = 1;
  var loadFile = function(event) {

    var input = event.target;
    var reader = new FileReader();
    // Read the file
    reader.readAsText(input.files[0]);
    // Invoked when file is loading.
    reader.onload = function(){
      // parse file to JSON object
      var jsonObject = reader.result;
      var json = JSON.parse(jsonObject);
      jsonlayer = L.geoJson(json, {
        onEachFeature: function (feature, layer) {
          layer.bindPopup(feature.properties.name);
        }}).addTo(map);
        lcontrol.addOverlay(jsonlayer, 'Imported JSON/GeoJSON Layer ' + i.toString());
        i++;
        toastr.success('Successfully imported JSON/GeoJSON file!', 'Success!', {timeOut: 2000});
    };
  };
  //Upload SHP
  //
  var ii = 1;
  function uploadSHP() {
    var x = document.getElementById("uploadSHP");
    var file = x.files[0];
    loadshp({
        url: file,
        encoding: 'big5',
        EPSG: 3826
    }, function(data) {
        vector.addData(data);
        map.fitBounds(vector.getBounds());
        lcontrol.addOverlay(vector, 'Imported SHP Layer ' + ii.toString());
        ii++;
        toastr.success('Successfully imported SHP file!', 'Success!', {timeOut: 2000});
    });
  }

  //Download Markers layer into JSON file
  //
  function downloadPointsJSON(){
    var pointsFileName = prompt("File name for Points JSON file.");
    if (pointsFileName != null) {
      var drawnItemsJson = drawnItems.toGeoJSON();
      console.log(drawnItemsJson);
      var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(drawnItemsJson));
      var dlAnchorElem = document.getElementById('downloadPoints');
      dlAnchorElem.setAttribute("href",     dataStr     );
      dlAnchorElem.setAttribute("download", pointsFileName + ".json");
    } else {
      toastr.error('Operation cancelled by user.', 'File download cancelled', {timeOut: 4000});
    }
  }

  //Download Lines layer into JSON file
  //
  function downloadLinesJSON(){
    var linesFileName = prompt("File name for Lines JSON file.");
    if (linesFileName != null) {
      var drawnLinesJson = drawnLines.toGeoJSON();
      console.log(drawnLinesJson);
      var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(drawnLinesJson));
      var dlAnchorElem = document.getElementById('downloadLines');
      dlAnchorElem.setAttribute("href",     dataStr     );
      dlAnchorElem.setAttribute("download", linesFileName + ".json");
    } else {
      toastr.error('Operation cancelled by user.', 'File download cancelled', {timeOut: 4000});
    }
  }

  //Write custom markers to database
  //
  function writeMarkerData() {
    var layername = prompt("Enter marker layer name", "Marker Layer " + Math.floor((Math.random() * 100) + 1))
    if (layername == null){
      // alert("Storage into firebase cancelled");
      toastr.error('Operation cancelled by user.', 'Storage into data base cancelled', {timeOut: 4000});
    }
    else{
      if (checkforDuplicates(layername)){
        // alert("Firebase already has map layer of that name. Input another name instead")
        toastr.error('Invalid name.', 'Storage into data base cancelled', {timeOut: 4000});
      }
      else {
        var datatype = 'Markers';
        var now = new Date();
        var drawnItemsJson = drawnItems.toGeoJSON();
        firebase.database().ref('Users/' + <%= user.id %> + '/' + datatype + "/" + layername).set({
          mapLayer: drawnItemsJson,
          timeEdited: now.toString()
        });
      }
    }
  }

  //Write custom lines to database
  //
  function writeLineData() {
    var layername = prompt("Enter line layer name", "Line Layer " + Math.floor((Math.random() * 100) + 1))
    var datatype = 'Lines';
    var now = new Date();
    var drawnLinesJson = drawnLines.toGeoJSON();
    mapLayer : drawnLinesJson,
    firebase.database().ref('Users/' + <%= user.id %> + '/' + datatype + "/"+ layername).set({
      timeEdited: now.toString()
    });
  }

  //Check database for similar lines
  // (WIP)
  function checkforDuplicates(layername){
    firebase.database().ref('Users/' + <%= user.id %> + 'Markers').once('value').then(function(snapshot) {
    var a = snapshot.child(layername).exists();
    console.log(a);
    return a;
    });
  }

  //Retrieve markers from database
  //
  function retrieveUserData() {
    var query = firebase.database().ref("Users/"+ <%= user.id %> + "/Markers/");
    query.once("value")
      .then(function(snapshot) {
        snapshot.forEach(function(childSnapshot) {
        // key will be "ada" the first time and "alan" the second time
        var key = childSnapshot.key;
        console.log(key)
        // childData will be the actual contents of the child
        var childData = childSnapshot.val();
      });
    });
  }

</script>
</html>
