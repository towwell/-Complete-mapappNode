<!DOCTYPE html>
<html>
<head>
  <meta charset='utf-8' />
  <title>Main Map</title>
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />

  <!-- jquery -->
  <script src="/javascripts/jquery-3.1.1.slim.min.js"></script>

  <!-- mapbox gl -->
  <script src='/javascripts/mapbox-gl.js'></script>
  <link  rel='stylesheet' href='/stylesheets/mapbox-gl.css'/>

  <!-- leaflet -->
  <link rel="stylesheet" href="/stylesheets/leaflet.css"/>
  <script src="/javascripts/leaflet.js"></script>

  <!-- leaflet draw -->
  <link rel="stylesheet" href="/stylesheets/leaflet.draw.css" />
	<script src="/javascripts/leaflet.draw.js"></script>

  <!-- json2 for stringify function -->
  <script src="javascripts/json2.js"></script>

  <!-- html style -->
  <link rel="stylesheet" href="/stylesheets/mainmap.css"/>

  <!-- bootstrap -->
  <link rel="stylesheet" href="/stylesheets/bootstrap.min.css"/>
	<link rel="stylesheet" href="/stylesheets/superhero-bootstrap.min.css"/>
	<script src="/javascripts/bootstrap.min.js"></script>

  <!-- Material Icon -->
  <link rel="stylesheet" href="/stylesheets/icon.css"/>

<!-- Firebase database stuff -->
<script src="https://www.gstatic.com/firebasejs/3.5.2/firebase.js"></script>
<script src="https://www.gstatic.com/firebasejs/3.5.0/firebase-app.js"></script>
<script src="https://www.gstatic.com/firebasejs/3.5.0/firebase-database.js"></script>

</head>
<body>
  <!-- NavBar Start -->
  <nav class="navbar navbar-default" id="navbar">
    <div class="container-fluid" style="padding-right: 0;">
      <div class="navbar-header">
        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1" aria-expanded="false">
          <span class="sr-only">Toggle navigation</span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
          <span class="icon-bar"></span>
        </button>
        <a class="navbar-brand center" id="title"><b>Leaflet Map</b></a>
      </div>
      <div class="navbar-collapse collapse" id="bs-example-navbar-collapse-1" aria-expanded="false" style="height: 1px;">
      <!-- align left buttons -->
        <ul class="nav navbar-nav" id="navbarItemGap">
          <!-- Upload button, modal trigger -->
          <li><a class="btn btn-success" data-target="#uploadModal" data-toggle="modal" id="navbarStyle">Upload Layer</a></li>
          <!-- Hidden modal -->
          <div class="modal fade" id="uploadModal">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                  <h4 class="modal-title">Upload layer</h4>
                </div>
                <div class="modal-body" id="modalbody">
                  <h5>Upload a data file in to display on map as imported layer</br></br><b>● GeoJSON</b></br><b>● JSON with Geocoordinates</b></h5>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                  <label class="btn btn-success" style="height: 42px;">Select File<input style="display: none;" type='file' accept='Json' onchange='loadFile(event)'></label>
                </div>
              </div>
            </div>
          </div>
          <!-- Upload button, modal trigger -->
          <li><a class="btn btn-primary" data-target="#downloadModal" data-toggle="modal" id="navbarStyle">Download Layer</a></li>

          <li class="dropdown" id="navbarStyle">
          <a class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false" style="background-color: #df691a" id="navbarStyle">Download Layer <span class="caret"></span></a>
            <ul class="dropdown-menu" role="menu">
              <li><a id="dropdownSize" onclick="downloadMarkersJSON()">Download <b>points</b> layer</a></li>
              <li class="divider"></li>
              <li><a id="dropdownSize" onclick="downloadLinesJSON()">Download <b>lines</b> layer</a></li>
            </ul>
          </li>
          <!-- Hidden modal -->
          <div class="modal fade" id="downloadModal">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                  <h4 class="modal-title">Download layer</h4>
                </div>
                <div class="modal-body" id="modalbody">
                  <h5>Data layer will be saved as <b>JSON(GeoJSON)</b></h5>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                  <a class="btn btn-primary" id="downloadAnchorElem" onclick="downloadMarkersJSON()">Download</a>
                </div>
              </div>
            </div>
          </div>
          <!-- Save online -->
          <li class="dropdown" id="navbarStyle">
          <a class="dropdown-toggle" data-toggle="dropdown" role="button" aria-expanded="false" style="background-color: #f0ad4e" id="navbarStyle">Save Online  <span class="caret"></span></a>
            <ul class="dropdown-menu" role="menu">
              <li><a id="dropdownSize" onclick="writeMarkerData()">Save <b>points</b></a></li>
              <li class="divider"></li>
              <li><a id="dropdownSize" onclick="writeLineData()">Save <b>lines</b></a></li>
            </ul>
          </li>
        </ul>
      <!-- align right buttons -->
        <ul class="nav navbar-nav navbar-right" id="logout">
          <li><a class="btn btn-default" id="navbarStyle">Welcome back, <b><%= user.username %></b></a></li>
          <!-- Logout button, modal trigger -->
          <li><a class="btn btn-danger" data-target="#logoutModal"  data-toggle="modal" id="navbarStyle"><i class="material-icons">power_settings_new</i></a></li>
          <!-- Hidden modal -->
          <div class="modal fade" id="logoutModal">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>
                  <h4 class="modal-title">Logout?</h4>
                </div>
                <div class="modal-body" id="modalbody">
                  <h5>You are about to <b>logout</b>, are you sure?</h5>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                  <a type="button" class="btn btn-danger" href="/logout">Logout</a>
                </div>
              </div>
            </div>
          </div>
        </ul>
      </div>
    </div>
  </nav>

  <!-- map div -->
  <div id='map'></div>

  <!-- Init map JS last after "map" div -->
  <script src="/javascripts/mainmap.js"></script>
</body>
<script>
  // Initialize Firebase
  var config = {
    apiKey: "AIzaSyBidD56QDaYhdtyNGS-rWhSzSfmzIWSmNk",
    authDomain: "awesome-93639.firebaseapp.com",
    databaseURL: "https://awesome-93639.firebaseio.com",
    storageBucket: "awesome-93639.appspot.com",
    messagingSenderId: "900291118172"
  };
  firebase.initializeApp(config);
  var database = firebase.database();

  //Basemap initialization
  var mapboxAttribution = 'Using Mapbox'
  var myurl = 'https://api.mapbox.com/styles/v1/towwell/ciugfz4qs00ix2is1aej7h4mh/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoidG93d2VsbCIsImEiOiJjaXVnZndjdnkwMDRsMnRveWR4OGdibmdqIn0.053ocWE7UF4hdJuc1PN9ew';
  var myurl2 = 'https://api.mapbox.com/styles/v1/towwell/ciughc16p002p2jqwv4nxojej/tiles/256/{z}/{x}/{y}?access_token=pk.eyJ1IjoidG93d2VsbCIsImEiOiJjaXVnZndjdnkwMDRsMnRveWR4OGdibmdqIn0.053ocWE7UF4hdJuc1PN9ew'
  var grayscale = L.tileLayer(myurl, {id: 'mapbox://styles/towwell/ciugfz4qs00ix2is1aej7h4mh', attribution: mapboxAttribution}),
      streets   = L.tileLayer(myurl2, {id: 'mapbox://styles/towwell/ciughc16p002p2jqwv4nxojej', attribution: mapboxAttribution});

    map.remove();
  	var map = L.map('map', {
      center: [1.352648, 103.810827],
      zoom: 12,
      layers: [grayscale]
  });
  //Drawn items layer init
  var drawnItems = new L.FeatureGroup();
  map.addLayer(drawnItems);

  var drawnLines = new L.FeatureGroup();
  map.addLayer(drawnLines);

  var drawControl = new L.Control.Draw({
    position: 'topright',
    draw: {
        polyline: false,
        polygon: false,
        rectangle: false,
        circle: false,
        marker: {
            color: 'green'
        }
    },
    edit: {
        featureGroup: drawnItems,
        remove: false
    }
});
map.addControl(drawControl);

var drawControl2 = new L.Control.Draw({
    position: 'topright',
    draw: {
        polyline: {
            metric: true,
        },
        polygon: false,
        rectangle: false,
        circle: false,
        marker: false
    },
    edit: {
        featureGroup: drawnLines,
        remove: false
    }
});
map.addControl(drawControl2);

  //What happens when custom point created
  map.on('draw:created', function (e) {
      var type = e.layerType,
          layer = e.layer;

      if (type === 'marker') {
  	    layer.addTo(drawnItems)
          // Do marker specific actions
      }
      if (type === 'polyline'){
        layer.addTo(drawnLines)
      }

      // Do whatever else you need to. (save to db, add to map etc)
      map.addLayer(layer);
  });

  //What happens when custom point edited
  map.on('draw:edited', function (e) {
      var layers = e.layers;
      layers.eachLayer(function (layer) {
          //do whatever you want, most likely save back to db
      });
  });

  //Basemap configs
  var baseMaps = {
      "Grayscale": grayscale,
      "Streets": streets
  };

  //Overlay map configs
  var overlayMaps = {
  	"Drawn Markers": drawnItems,
    "Drawn Lines": drawnLines
  };
  //First load of layer control
  lcontrol = L.control.layers(baseMaps, overlayMaps).addTo(map);

  /////////////////////////////////////////////////////////////
  //FUNCTIONS BELOW ONLY
  /////////////////////////////////////////////////////////////

  //Download Markers layer into JSON file
  //
  function downloadMarkersJSON(){
    var drawnItemsJson = drawnItems.toGeoJSON();
    console.log(drawnItemsJson);
    var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(drawnItemsJson));
    var dlAnchorElem = document.getElementById('downloadAnchorElem');
    dlAnchorElem.setAttribute("href",     dataStr     );
    dlAnchorElem.setAttribute("download", "scene.json");
    dlAnchorElem.click();
  }
  //Download Lines layer into JSON file
  //
  function downloadLinesJSON(){
     var drawnLinesJson = drawnLines.toGeoJSON();
    console.log(drawnLinesJson);
    var dataStr = "data:text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(drawnLinesJson));
    var dlAnchorElem = document.getElementById('downloadAnchorElem');
    dlAnchorElem.setAttribute("href",     dataStr     );
    dlAnchorElem.setAttribute("download", "scene.json");
    dlAnchorElem.click();
  }
  //Write custom markers to database
  //
  function writeMarkerData() {
    var datatype = 'markers';
    var currentdate = new Date();
    var drawnItemsJson = drawnItems.toGeoJSON();
  firebase.database().ref('Users/' + <%= user.id %> + '/' + datatype + "/"+ currentdate).set({
    mapLayer : drawnItemsJson
  });
}
  //Write custom lines to database
  //
  function writeLineData() {
    var datatype = 'lines';
    var currentdate = new Date();
    var drawnLinesJson = drawnLines.toGeoJSON();
  firebase.database().ref('Users/' + <%= user.id %> + '/' + datatype + "/"+ currentdate).set({
    mapLayer : drawnLinesJson
  });
}
  //Retrieve markers from database
  //
  function retrieveUserData() {

  }

  var i = 1;
  //FileReader that reads GeoJSON to display onto map
  //
  var loadFile = function(event) {
  // Init
  var input = event.target;
  var reader = new FileReader();

  // Read the file
  reader.readAsText(input.files[0]);

  // Invoked when file is loading.
  reader.onload = function(){

      // parse file to JSON object
      var jsonObject = reader.result;
      var json = JSON.parse(jsonObject);
      jsonlayer = L.geoJson(json, {
  onEachFeature: function (feature, layer) {
    layer.bindPopup(feature.properties.name);
  }}).addTo(map);
      lcontrol.addOverlay(jsonlayer, 'Imported Layer ' + i.toString());
      console.log(jsonObject);
      i++;
  };
  };

</script>
</html>
